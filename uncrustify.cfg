# Cumberland Valley Computer Science Department Programming Code Style Requirements

# 1. IDENTIFICATION HEADING 
#
# CANNOT BE IMPLEMENTED IN UNCRUSTIFY

# 2. SUB-ROUTINE / FUNCTION / METHOD HEADERS 
#
# CANNOT BE IMPLEMENTED IN UNCRUSTIFY

# 3. WHITE SPACE 
# Use vertical and horizontal white space appropriately. Indent each block of code for loop and decision statements.
indent_with_tabs = 0            # Use spaces instead of tabs
indent_columns = 4              # Indent by 4 spaces

# Braces should be on their own line of code. 
nl_brace_else = add
nl_enum_brace = add
nl_union_brace = add
nl_struct_brace = add
nl_do_brace = add
nl_if_brace = add
nl_for_brace = add
nl_else_brace = add
nl_while_brace = add
nl_switch_brace = add
nl_brace_while = add
nl_brace_else = add
nl_var_def_blk_end_func_top = 1
nl_fcall_brace = add
nl_fdef_brace = add

# 4. LINE LENGTH 
# Restrict the horizontal length of lines of your code to fit upon the screen/printed paper
code_width = 80

# 5. MEANINGFUL VARIABLE NAMES
# Choose meaningful names for your identifiers. This includes things like files, functions, variables, and parameters. 
# Pick names that are self-documenting! Avoid using one-letter variable names unless the variable is a loop counter or makes sense in the equation. 
#
# CANNOT BE IMPLEMENTED IN UNCRUSTIFY
# Use your best judgment lol

# 6. CAPITALIZATION OF NAMES 
# Constant variables should be in all caps (i.e. PI = 3.14159) 
# Classes should begin with capital letters (i.e. Square) 
# Functions/methods should begin with a lower case letter (i.e. findDistance) 
# Variables should begin with lower case letters (i.e. slope) 
# Use “camel notation” for naming things with multiple words (i.e. thisIsCamelStyle) 
#
# CANNOT BE IMPLEMENTED IN UNCRUSTIFY

# 7. VARIABLE SCOPE/TYPE 
# Do your best to properly place variables within the correct scope. 
# If you’re only using a variable within a function, place it within that function. 
# Never simply make every variable a global variable! 
# Be sure to select the best and most appropriate type for your variables. Do you need decimal places? If so, how many? 
#
# CANNOT BE IMPLEMENTED IN UNCRUSTIFY

# 8. UNNECESSARY CODE 
# If you can do it in less code, do so! Use and’s and or’s in if-statements. Use for and while loops. If you are writing 100 if-statements, there’s probably an easier way to do the program! 
# 
# CANNOT BE IMPLEMENTED IN UNCRUSTIFY

# 9. MAKE SURE THE OUTPUT MATCHES THE REQUIREMENTS 
# Make sure your program displays results exactly as specified. For example, if the output requires a certain number of decimal places and your program does not display them, it is incorrect.
# 
# CANNOT BE IMPLEMENTED IN UNCRUSTIFY
